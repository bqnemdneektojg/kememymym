# -*- coding: utf-8 -*-
from urllib.parse import quote
from aiogram import Bot
import aiohttp
import hashlib
import config
import keep_alive
import asyncio
import csv
from pyrogram import Client
from pyrogram.types import InputPhoneContact
import json
import requests
from requests.structures import CaseInsensitiveDict
from aiogram import Bot
from bs4 import BeautifulSoup
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils import executor
import random
from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, message
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import markups as nav
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import Throttled
import socket
# --------------------------------------------------------

token='5308416438:AAGhpSnx2eUyJRgH6cKYGUsF-mCWkmKuTL4'
#----------------------------
bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())


# --------------------------------------------------------------

async def anti_flood(*args, **kwargs):
    m = args[0]
    await m.answer("‚ùå* –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ! *–ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã.", parse_mode='Markdown')
  
# --------------------------------------------------------------
@dp.message_handler(commands=['start'])
async def main(message: types.Message):
    if check_sub_channel(await bot.get_chat_member(chat_id='@visiiione', user_id=message.from_user.id)):
        global z
        z = 0
        subn = InlineKeyboardButton('üéì –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='https://t.me/+JI-8OuLfufU5ZGU1')
        subkaa = InlineKeyboardMarkup.add(subn)
        await message.answer('üï∑Ô∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ:\n\nüì≤ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\nüê¶‚Äç‚¨õ –ê–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã\nü•∑ Telegram ID\nüï∑Ô∏è IP-–∞–¥—Ä–µ—Å\n\nüêú –§–∏–æ', reply_markup=nav.menu_b, parse_mode="Markdown")
        arg = message.get_args().replace("['", '').replace("']", '')
        argi = arg
        with open('exists.txt') as file:
          for line in file:
            if str(message.from_user.id) in line:
              
              z = 1
        
        with open('refff.txt', 'a') as file:
              print(z)
              if z == 0:
                ff = str(arg)+'\n'
                file.write(ff+'\n')
                await bot.send_message(argi, text='ü•∑ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª 1 —á–µ–ª', parse_mode='Markdown')
                
        with open('exists.txt', 'a') as file:
          file.write(str(message.from_user.id)+'\n')
    else:
        await message.answer('–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º', reply_markup=nav.subchanneldonw)
    
# --------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ---------------------------------------------------

  






  
@dp.message_handler()
@dp.throttled(anti_flood,rate=3)
async def buttons(message: types.Message):
    global tarifan
    tarifan = 0
    user_id = str(message.from_user.id)
    with open('tickets.txt', encoding='utf-8', errors='ignore') as file:
              for line in file:
                if user_id in line:
                  tarifan = 1
    token_yandex = '7d982772d748841b9bc505d72c131845b59f4d3977b7a303bb8a6809a609c892'
    indata = message.text
    phonse = indata.replace('+', '').replace('-', '').replace('(', '').replace(')', '').replace(' ', '')
    print(str(tarifan)+'t')
    try:
      phonse = int(phonse)
      ogogg = 0
    except:
      ogogg = 1
    if 'import' in indata:
      pass
    if ogogg == 0:
        phonse = indata.replace('+', '').replace('-', '').replace('(', '').replace(')', '').replace(' ', '')
        lenz = len(phonse)
        validat = requests.get('	https://demo.phoneinfoga.crvx.fr/api/numbers/'+phonse+'/scan/local')
        if validat.status_code == 200:
          with open('alarm.txt', encoding='utf-8', errors='ignore') as file:
              for line in file:
                  if phonse in line:
                    id = line.split(';')[0]
                    await bot.send_message(id, text="üï∑Ô∏è –°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! –í–∞—Å –ø—ã—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–∏—Ç—å, –Ω–æ –º—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å", parse_mode='Markdown')
          if lenz == 11:
              global phone
              phone = phonse[1:]
              phonse = phonse[1:]
              phonse = '7' + phonse
          else:
              phone = phonse
          # –î–µ—Ñ–æ–ª—Ç –¥–∞–Ω–Ω—ã–µ -------------------
  
          fstep_msg = await message.answer('üé© –û–ø—Ä–µ–¥–µ–ª—è—é –≥–æ—Ä–æ–¥, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', parse_mode="Markdown")
          async with aiohttp.ClientSession() as session:
            async with session.get(f'https://fincalculator.ru/api/tel/{phonse}') as SBnum:
              #SBnum = requests.get(f"https://fincalculator.ru/api/tel/{phonse}")
              datae = await SBnum.json()
          # –ø–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞ -----------------------------
          
          #urlMNP = f"https://xn----dtbofgvdd5ah.xn--p1ai/php/mnp.php?nomer={phonse}"
          mnp = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
          whatsapp = InlineKeyboardButton('üê¶‚Äç‚¨õ Whatsapp', url='wa.me/' + phonse)
          viber = InlineKeyboardButton('üï∑Ô∏è Viber', url='viber.click/' + phonse)
          telega = InlineKeyboardButton('üé© –¢–µ–ª–µ–≥—Ä–∞–º', url='t.me/+' + phonse)
          yandexs = InlineKeyboardButton('üéì –Ø–Ω–¥–µ–∫—Å', url='https://yandex.ru/search/?text='+phonse)
          goog = InlineKeyboardButton('üêú Google', url='https://www.google.com/search?q='+phonse)
  
          name='empty'
          head = {
                "Host": "api.vkpay.io",
                "Accept": "application/json, text/plain, */*",
                "Origin": "https://ea-miniapp.vkpay.io",
                "X-App-Params": '{"vk_access_token_settings":"notify,friends,groups","vk_app_id":"7131443","vk_are_notifications_enabled":"0","vk_experiment":"eyIxNjE4IjowfQ","vk_is_app_user":"1","vk_is_favorite":"0","vk_language":"ru","vk_platform":"desktop_web","vk_ref":"other","vk_ts":"1650541292","vk_user_id":"616028231","sign":"zOQRbuQQcD95SmmTcHR_EtmeDkhwL4VCjQ7LS6PcYMI"}',
                "X-VKApp-Token": "f7b1f08d-ee0c-479f-bdb0-912bd38ddaa9"
            }
           
          async with aiohttp.ClientSession(headers=head) as session:
                  async with session.post("https://api.vkpay.io/visa-alias/p2p/options", json={"phone": str(phonse)}) as r:
                    r = await r.json()
                    print(r)
                    data = r
                    # data = json.loads(r.text)
            
                    name = data["additional_data"]["user_name"].replace(' ', '+')
          vkments = InlineKeyboardButton('üé© –ü–æ–∏—Å–∫ –í–ö', url='https://www.social-searcher.com/social-buzz/?q5='+name)
          if name != '':
            variations = InlineKeyboardMarkup().add(whatsapp, viber, telega, yandexs, goog, vkments)
          else:
            variations = InlineKeyboardMarkup().add(whatsapp, viber, telega, yandexs, goog)
  
          await fstep_msg.delete()
          mnp_msg = await message.answer('üï∑Ô∏è –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –¥–∞–Ω–Ω–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞ –≤—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä', parse_mode="Markdown")
          # –ü–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞ ------------------------
          mnp = ''
          try:
            urlMNP = f"https://xn----dtbofgvdd5ah.xn--p1ai/php/mnp.php?nomer={phonse}"
            mnpSiteSourc = requests.get(urlMNP).text.strip()
            mnp = mnpSiteSourc.replace('no',
                                           '–ù–æ–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–ª—Å—è')
          except:
            mnp = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
          try:
              countrys = datae["country"]
              regions = datae["region"]
              operators = datae["operator"]
              if countrys != '–†–æ—Å—Å–∏—è':
                  fstep = f'üì≤ *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* `{phonse}`\n ‚îú *–°—Ç—Ä–∞–Ω–∞:* `{countrys}`\n ‚îú *–ü–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞:* `{mnp}`\n ‚îî *–û–ø–µ—Ä–∞—Ç–æ—Ä:* `{regions}`'
                  fstep_html = f'–°—Ç—Ä–∞–Ω–∞ {countrys}<br>–ü–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞: {mnp}<br>–û–ø–µ—Ä–∞—Ç–æ—Ä: {regions}'
              else:
                  fstep = f'üé© –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:{phonse}\n –°—Ç—Ä–∞–Ω–∞: {countrys}\n –†–µ–≥–∏–æ–Ω:`{regions}`\n ‚îú *–ü–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞:* `{mnp}`\n ‚îî *–û–ø–µ—Ä–∞—Ç–æ—Ä:* `{operators}`'
                  fstep_html = f'–°—Ç—Ä–∞–Ω–∞ {countrys}<br>–†–µ–≥–∏–æ–Ω: {regions}<br>–ü–µ—Ä–µ–Ω–æ—Å –Ω–æ–º–µ—Ä–∞: {mnp}<br>–û–ø–µ—Ä–∞—Ç–æ—Ä: {operators}'
          except:
              countrys = '–ù–µ –æ–ø–æ–∑–Ω–∞–Ω–æ'
              regions = '–ù–µ –æ–ø–æ–∑–Ω–∞–Ω–æ'
              operators = '–ù–µ –æ–ø–æ–∑–Ω–∞–Ω–æ'
          await mnp_msg.delete()
          # –°–±–µ—Ä -----------------------------------------
          sber_msg = await message.answer('üï∏Ô∏è –ò—â–µ–º —Å–±–µ—Ä', parse_mode="Markdown")
          sberbank_message = ''
          maskedPhone = ''
          tarifan = 0
          user_id = str(message.from_user.id)
          with open('tickets.txt', encoding='utf-8', errors='ignore') as file:
                    for line in file:
                      if user_id in line:
                        tarifan = 1
          if tarifan == 1:
            try:
                sberbank = requests.post(f"https://securepayments.sberbank.ru/sbersafe/client/find?phone={phone}")
                datas = sberbank.json()
    
                get_date = datas['client']['createdDate']
                get_date2 = get_date[:10]
                rep1 = get_date2.replace(".01.", " —è–Ω–≤–∞—Ä—è ")
                rep2 = rep1.replace(".02.", " —Ñ–µ–≤—Ä–∞–ª—è ")
                rep3 = rep2.replace(".03.", " –º–∞—Ä—Ç–∞ ")
                rep4 = rep3.replace(".04.", " –∞–ø—Ä–µ–ª—è ")
                rep5 = rep4.replace(".05.", " –º–∞—è ")
                rep6 = rep5.replace(".06.", " –∏—é–Ω—è ")
                rep7 = rep6.replace(".07.", " –∏—é–ª—è ")
                rep8 = rep7.replace(".08.", " –∞–≤–≥—É—Å—Ç–∞ ")
                rep9 = rep8.replace(".09.", " —Å–µ–Ω—Ç—è–±—Ä—è ")
                rep10 = rep9.replace(".10.", " –æ–∫—Ç—è–±—Ä—è ")
                rep11 = rep10.replace(".11.", " –Ω–æ—è–±—Ä—è ")
                rep12 = rep11.replace(".12.", " –¥–µ–∫–∞–±—Ä—è ")
                rep13 = get_date[11:-7]
    
                maskedPhone = datas['client']['maskedPhone']
                created_date = f'{rep12} –≥. –≤ {rep13}'
                sberbank_message = f"üï∏Ô∏è –°–±–µ—Ä–±–∞–Ω–∫: –µ—Å—Ç—å({created_date})\n"
                sberbank_message_html = f"–°–±–µ—Ä–±–∞–Ω–∫: –µ—Å—Ç—å ({created_date})<br>"
            except:
                sberbank_message = ''
                sberbank_message_html = ''
            await sber_msg.delete()
          else:
            try:
                sberbank = requests.post(f"https://securepayments.sberbank.ru/sbersafe/client/find?phone={phone}")
                datas = sberbank.json()
    
                get_date = datas['client']['createdDate']
                get_date2 = get_date[:10]
                rep1 = get_date2.replace(".01.", " —è–Ω–≤–∞—Ä—è ")
                rep2 = rep1.replace(".02.", " —Ñ–µ–≤—Ä–∞–ª—è ")
                rep3 = rep2.replace(".03.", " –º–∞—Ä—Ç–∞ ")
                rep4 = rep3.replace(".04.", " –∞–ø—Ä–µ–ª—è ")
                rep5 = rep4.replace(".05.", " –º–∞—è ")
                rep6 = rep5.replace(".06.", " –∏—é–Ω—è ")
                rep7 = rep6.replace(".07.", " –∏—é–ª—è ")
                rep8 = rep7.replace(".08.", " –∞–≤–≥—É—Å—Ç–∞ ")
                rep9 = rep8.replace(".09.", " —Å–µ–Ω—Ç—è–±—Ä—è ")
                rep10 = rep9.replace(".10.", " –æ–∫—Ç—è–±—Ä—è ")
                rep11 = rep10.replace(".11.", " –Ω–æ—è–±—Ä—è ")
                rep12 = rep11.replace(".12.", " –¥–µ–∫–∞–±—Ä—è ")
                rep13 = get_date[11:-7]
    
                maskedPhone = datas['client']['maskedPhone']
                created_date = f'{rep12} –≥. –≤ {rep13}'
                sberbank_message = f"üï∏Ô∏è –°–±–µ—Ä–±–∞–Ω–∫: –µ—Å—Ç—å\n"
                sberbank_message_html = '–°–±–µ—Ä–±–∞–Ω–∫: –µ—Å—Ç—å<br>'
            except:
                sberbank_message = ''
                sberbank_message_html = ''
            await sber_msg.delete()
          # 2GIS ----------------------------------------
          tgis_html = ''
          tgis = ''
          head = {'Host': 'id.2gis.com',
  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0',
  'Content-Length': '30'}
          rt = requests.post('https://id.2gis.com/api/v1/send_confirm_sms',
                             json={"phone": phonse, "locale": "ru-RU"}, headers=head).json()
          print(rt)
          try:
              exe = rt['phone']
              vho = 1
          except Exception as e:
              print(f'Exception 2GIS is: {e}')
              tgis = ''
              vho = 0
          if vho == 1:
              tgis = 'üìó *–ê–∫–∫–∞—É–Ω—Ç –Ω–∞ –ì–ò–°: –µ—Å—Ç—å'
              tgis_html = '–î—É–±–ª—å–ì–ò–°: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç<br>'
          else:
                    tgis = ''
                    tgis_html = ''
                
          
                  
          
          # –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ -------------------------------
          ok_msg = await message.answer('üï∑Ô∏è –ß–µ–∫–∞—é, –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞—Ö',
                                        parse_mode="Markdown")
          # –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏
          session = requests.Session()
          session.get(
              f'https://www.ok.ru/dk?st.cmd=anonymMain&st.accRecovery=on&st.error=errors.password.wrong&st.email={phonse}')
          request = session.get(
              f'https://www.ok.ru/dk?st.cmd=anonymRecoveryAfterFailedLogin&st._aid=LeftColumn_Login_ForgotPassword')
          root_soup = BeautifulSoup(request.content, 'html.parser')
          soup = root_soup.find('div', {'data-l': 'registrationContainer,offer_contact_rest'})
          if soup:
              account_info = soup.find('div', {'class': 'ext-registration_tx taCenter'})
              masked_email = soup.find('button', {'data-l': 't,email'})
              masked_phone = soup.find('button', {'data-l': 't,phone'})
              if masked_phone:
                  masked_phone = masked_phone.find('div', {'class': 'ext-registration_stub_small_header'}).get_text()
              if masked_email:
                  masked_email = masked_email.find('div', {'class': 'ext-registration_stub_small_header'}).get_text()
                  masked_email = f'–ü–æ—á—Ç–∞: `{masked_email}`,'
              else:
                  masked_email = ''
              if account_info:
                  masked_name = account_info.find('div', {'class': 'ext-registration_username_header'})
                  if masked_name:
                      masked_name = masked_name.get_text()
                  account_info = account_info.findAll('div', {'class': 'lstp-t'})
                  if account_info:
                      profile_info = account_info[0].get_text()
                      profile_registred = account_info[1].get_text()
                  else:
                      profile_info = None
                      profile_registred = None
              else:
                  pass
          await ok_msg.delete()
  
          try:
              age = profile_info[:7].replace(',', '')
              cityok = profile_info[8:].replace(',', '')
              age = f''
              cityok = f'`{cityok}`'
              tarifan = 0
              user_id = str(message.from_user.id)
              with open('tickets.txt', encoding='utf-8', errors='ignore') as file:
                        for line in file:
                          if user_id in line:
                            tarifan = 1
              if tarifan == 1:
                ok = f'\n –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏:{masked_name}` (`{profile_info}`, {masked_email} `{profile_registred})`\n'
                ok_html = f'–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: {masked_name} ({profile_info},<br> {masked_email}, {profile_registred})<br>'.replace('`', '').replace(',,', ',')
              elif tarifan == 0:
                ok = f'\n–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: –Ω–∞—à–µ–ª\n'
                ok_html = '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: –Ω–∞–π–¥–µ–Ω—ã<br>'
              
          except:
              ok = ''
              cityok = ''
              age = ''
              masked_email = ''
              ok_html = ''
          # –Ø–Ω–¥–µ–∫—Å ---------------------------------------
          yand_msg = await message.answer('üï∏Ô∏è –ß–µ–∫–∞—é, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —è–Ω–¥–µ–∫—Å –∫ –Ω–æ–º–µ—Ä—É',
                                          parse_mode="Markdown")
          # yandex
          try:
              eqereq = message.text.strip()
              email_login = (eqereq.split("@"))[0]
              async with aiohttp.ClientSession() as session:
                async with session.get(f"https://yandex.ru/collections/api/users/{email_login}") as yandex:
                  try:
                      yamail = phonse + '@yandex.ru'
                  except:
                      yamail = ''
                  yamailo = f', `{yamail}`'
                  yadata = await yandex.json()
                  public_id = yadata['public_id']
                  display_name = yadata['display_name']
                  try:
                      yaname = f' ({display_name})'
                  except:
                      yaname = ''
                  try:
                    if tarifan != 0:
                      yandexx = f'\n„äó *–Ø–Ω–¥–µ–∫—Å ID:* `{public_id}`{yaname}\n'
                      yandexx_html = f'–Ø–Ω–¥–µ–∫—Å: {public_id}{yaname}<br>'
                    else:
                      yandexx = f'\n„äó *–Ø–Ω–¥–µ–∫—Å ID:* `–Ω–∞–π–¥–µ–Ω`\n'
                      yandexx_html = f'–Ø–Ω–¥–µ–∫—Å: –Ω–∞–π–¥–µ–Ω<br>'
                  except:
                    if tarifan != 0:
                      yandexx = f'\n„äó *–Ø–Ω–¥–µ–∫—Å ID:* `{public_id}`\n'
                      yandexx_html = f'–Ø–Ω–¥–µ–∫—Å: {public_id}<br>'
                    else:
                      yandexx = f'\n„äó *–Ø–Ω–¥–µ–∫—Å ID:* `–Ω–∞–π–¥–µ–Ω`\n'
                      yandexx_html = f'–Ø–Ω–¥–µ–∫—Å: –Ω–∞–π–¥–µ–Ω<br>'
          except:
                  display_name = ''
                  public_id = ''
                  yandexx = ''
                  yandexx_html = ''
                  yamail = ''
                  yaname = display_name
                  if yandexx == '':
                    yamailo = ''
          await yand_msg.delete()
          # –í–ö–æ–Ω—Ç–∞–∫—Ç–µ -----------------------------------
          nameqs_html = ''
          vkmsg = await message.answer('ü§ñ *–ò—â–µ–º –í–ö–æ–Ω—Ç–∞–∫—Ç–µ...*', parse_mode="Markdown")
          try:
            head = {
                "Host": "api.vkpay.io",
                "Accept": "application/json, text/plain, */*",
                "Origin": "https://ea-miniapp.vkpay.io",
                "X-App-Params": '{"vk_access_token_settings":"notify,friends,groups","vk_app_id":"7131443","vk_are_notifications_enabled":"0","vk_experiment":"eyIxNjE4IjowfQ","vk_is_app_user":"1","vk_is_favorite":"0","vk_language":"ru","vk_platform":"desktop_web","vk_ref":"other","vk_ts":"1650541292","vk_user_id":"616028231","sign":"zOQRbuQQcD95SmmTcHR_EtmeDkhwL4VCjQ7LS6PcYMI"}',
                "X-VKApp-Token": "f7b1f08d-ee0c-479f-bdb0-912bd38ddaa9"
            }
            async with aiohttp.ClientSession(headers=head) as session:
                  async with session.post("https://api.vkpay.io/visa-alias/p2p/options", json={"phone": str(phonse)}) as r:
                    r = await r.json()
                    print(r)
                    data = r
                    # data = json.loads(r.text)
            
                    name = data["additional_data"]["user_name"]
                    hasVk = data["additional_data"]["has_vk"]
                    vk_gua = name.replace(' ', '+')
                    if name != '':
                        vk = 'ü§ñ *–í–ö–æ–Ω—Ç–∞–∫—Ç–µ:* `' + name + '`\n‚Äî  –°–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ –í–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `vk.com/search?c[section]=name&c[q]=' + vk_gua + '`\n‚Äî  –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ–¥ –∏ –∞–≤–∞—Ç–∞—Ä–∫—É: `vk.com/restore`\n'
                        vk_html = '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ: '+name+'<br>'
                    else:
                        vk = ''
                        vk_html = ''
            await vkmsg.delete()
          except:
            vk = ''
          # –î–æ–º–†–£ ----------------------------------------
          address = ''
          domru_msg = await message.answer('üè† *–ò—â–µ–º –∞–¥—Ä–µ—Å –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É DOM.RU...*', parse_mode="Markdown")
          tarifan = 0
          user_id = str(message.from_user.id)
          with open('tickets.txt', encoding='utf-8', errors='ignore') as file:
                    for line in file:
                      if user_id in line:
                        tarifan = 1
          if tarifan == 1:
            if "#" in message.text:
                regions = '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
            if "-" in message.text:
                regions = '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
            if regions == '–ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'msk'
            elif regions == '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'irkutsk'
            elif regions == '–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π':
                gorod = 'barnaul'
            elif regions == '–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π':
                gorod = 'ber'
            elif regions == '–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'bryansk'
            elif regions == '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'volgograd'
            elif regions == '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'voronezh'
            elif regions == '–£–¥–º—É—Ä—Ç—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞':
                gorod = 'votkinsk'
            elif regions == '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'dzr'
            elif regions == '–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'ulsk'
            elif regions == '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'voronezh'
            elif regions == '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª':
                gorod = 'yola'
            elif regions == '–†–µ—Å–ø—É–±–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω':
                gorod = 'kazan'
            elif regions == '–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'kirov'
            elif regions == '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π':
                gorod = 'krd'
            elif regions == '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π':
                gorod = 'krsk'
            elif regions == '–ö—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'kurgan'
            elif regions == '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'kursk'
            elif regions == '–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'lipetsk'
            elif regions == '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'chel'
            elif regions == '–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'mich'
            elif regions == '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'nsk'
            elif regions == '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'omsk'
            elif regions == '–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'oren'
            elif regions == '–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'penza'
            elif regions == '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'rostov'
            elif regions == '–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'ryazan'
            elif regions == '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'samara'
            elif regions == '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥':
                gorod = 'interzet'
            elif regions == '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'saratov'
            elif regions == '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'voronezh'
            elif regions == '–¢–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'tomsk'
            elif regions == '–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'tver'
            elif regions == '–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'tula'
            elif regions == '–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'tmn'
            elif regions == '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è':
                gorod = 'ulu'
            elif regions == '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ç–æ—Ä—Å—Ç–∞–Ω':
                gorod = 'ufa'
            elif regions == '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ß—É–≤–∞—à–∏—è':
                gorod = 'cheb'
            elif regions == '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                gorod = 'yar'
            else:
                gorod = "msk"
            urldru = 'https://api-profile.domru.ru/v1/unauth/contract-asterisked?contact=' + phonse + '&amp;isActive=1'
    
            headersd = CaseInsensitiveDict()
            headersd["Host"] = "api-profile.domru.ru"
            headersd["Domain"] = gorod
            async with aiohttp.ClientSession(headers=headersd) as session:
              async with session.get(urldru) as resp:
                resp = await resp.json()
                domruu = ''
                try:
                  dataa = resp['contacts'][0]['address']
                  domruu = f'üîå *–ù–∞–π–¥–µ–Ω –¥–æ–≥–æ–≤–æ—Ä —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –î–û–ú.RU*\nüè† –ê–¥—Ä–µ—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: `{dataa}`\n'
                  domruu_html = '–î–æ–º–†–£: '+dataa+'<br>'
                except:
                  domruu = ''
                  domruu_html = ''
                phonke = '+'+phonse
                phonee = phonse
                phonio = phonee.replace('', ' ')
                dd = phonio.split()[0]+'/'+phonio.split()[1]+'/'+phonio.split()[2]+'/'+phonio.split()[3]+'/'+phonio.split()[4]+'/'+phonio.split()[5]
                adcs = ''
                try:
                  rw = requests.get('https://saverudata.info/db/'+dd+'/00000-99999.json').json()
                  adcs = ''
                  address_html = ''
                  for i in range(len(rw)):
                                if phonke in rw[i]:
                                    ee = i
                                    datacd = rw[ee]
                                    print(rw[ee])
                                    
                                    if datacd[1] != '':
                                      adcs = adcs+f'{datacd[1]}, {datacd[2]}, –¥–æ–º {datacd[3]}, –ø–æ–¥—å–µ–∑–¥ {datacd[4]}, –∫–≤ {datacd[5]}\n'
                                else:
                                      pass
                  try:
                                dataa = resp['contacts'][0]['address']
                                address = f'üè† *–í–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è*: `{adcsasdsda}`\n'
                                address_html = f'–í–æ–∑–º–æ–∂–Ω—ã–µ –∞–¥—Ä–µ—Å–∞: {adcsasdsda}<br>'
                  except:
                              if adcs != '':
                                address = f'üè† *–í–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è*: `{adcs}`\n'
                                address_html = f'–í–æ–∑–º–æ–∂–Ω—ã–µ –∞–¥—Ä–µ—Å–∞: {adcs}<br>'
                except:
                  address = ''
                  address_html = ''
          elif tarifan == 0:
              if "#" in message.text:
                  regions = '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
              if "-" in message.text:
                  regions = '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
              if regions == '–ú–æ—Å–∫–≤–∞ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'msk'
              elif regions == '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'irkutsk'
              elif regions == '–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π':
                  gorod = 'barnaul'
              elif regions == '–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π':
                  gorod = 'ber'
              elif regions == '–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'bryansk'
              elif regions == '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'volgograd'
              elif regions == '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'voronezh'
              elif regions == '–£–¥–º—É—Ä—Ç—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞':
                  gorod = 'votkinsk'
              elif regions == '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'dzr'
              elif regions == '–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'ulsk'
              elif regions == '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'voronezh'
              elif regions == '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª':
                  gorod = 'yola'
              elif regions == '–†–µ—Å–ø—É–±–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω':
                  gorod = 'kazan'
              elif regions == '–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'kirov'
              elif regions == '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π':
                  gorod = 'krd'
              elif regions == '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π':
                  gorod = 'krsk'
              elif regions == '–ö—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'kurgan'
              elif regions == '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'kursk'
              elif regions == '–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'lipetsk'
              elif regions == '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'chel'
              elif regions == '–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'mich'
              elif regions == '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'nsk'
              elif regions == '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'omsk'
              elif regions == '–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'oren'
              elif regions == '–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'penza'
              elif regions == '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'rostov'
              elif regions == '–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'ryazan'
              elif regions == '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'samara'
              elif regions == '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥':
                  gorod = 'interzet'
              elif regions == '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'saratov'
              elif regions == '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'voronezh'
              elif regions == '–¢–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'tomsk'
              elif regions == '–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'tver'
              elif regions == '–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'tula'
              elif regions == '–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'tmn'
              elif regions == '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è':
                  gorod = 'ulu'
              elif regions == '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ç–æ—Ä—Å—Ç–∞–Ω':
                  gorod = 'ufa'
              elif regions == '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ß—É–≤–∞—à–∏—è':
                  gorod = 'cheb'
              elif regions == '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å':
                  gorod = 'yar'
              else:
                  gorod = "msk"
              urldru = 'https://api-profile.domru.ru/v1/unauth/contract-asterisked?contact=' + phonse + '&amp;isActive=1'
      
              headersd = CaseInsensitiveDict()
              headersd["Host"] = "api-profile.domru.ru"
              headersd["Domain"] = gorod
              async with aiohttp.ClientSession(headers=headersd) as session:
                async with session.get(urldru) as resp:
                  resp = await resp.json()
                  domruu = ''
                  try:
                      dataa = resp['contacts'][0]['address']
                      domruu = f'üîå *–ù–∞–π–¥–µ–Ω –¥–æ–≥–æ–≤–æ—Ä —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –î–û–ú.RU*\nüè† –ê–¥—Ä–µ—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: `{dataa}`\n'
                      domruu_html = f'–î–æ–º–†–£: {dataa}<br>'
                  except:
                    domruu = ''
                    domruu_html = ''
                  phonke = '+'+phonse
                  phonee = phonse
                  phonio = phonee.replace('', ' ')
                  dd = phonio.split()[0]+'/'+phonio.split()[1]+'/'+phonio.split()[2]+'/'+phonio.split()[3]+'/'+phonio.split()[4]+'/'+phonio.split()[5]
                  try:
                    rw = requests.get('https://saverudata.info/db/'+dd+'/00000-99999.json').json()
                    adcs = ''
                    for i in range(len(rw)):
                                  if phonke in rw[i]:
                                      ee = i
                                      datacd = rw[ee]
                                      print(rw[ee])
                                      
                                      if datacd[1] != '':
                                        adcs = adcs+f'{datacd[1]}, {datacd[2]}, –¥–æ–º {datacd[3]}, –ø–æ–¥—å–µ–∑–¥ {datacd[4]}, –∫–≤ {datacd[5]}\n'
                                  else:
                                        pass
                    try:
                        address_html = ''
                        address = osdfo
                    except:
                        if adcs != '':
                          address = f'üè† *–í–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è*: `–Ω–∞–π–¥–µ–Ω–æ`\n'
                          address_html = f'–í–æ–∑–º–æ–∂–Ω—ã–µ –∞–¥—Ä–µ—Å–∞: –Ω–∞–π–¥–µ–Ω–æ<br>'
                  except:
                    address = ''
                    address_html = ''
          await domru_msg.delete()
          # –¢–µ–ª–µ–≥—Ä–∞–º -------------------------------------
          tg = ''
          tg_html = ''
          rt = requests.get('https://capitalcloudytriangle.hkfdsfsdfh.repl.co/info?d='+phonse).content.decode("utf-8", "ignore")
          rt = str(rt).replace('b', '').replace("'", '')
          print(rt)
          tg = 'üõÖ *Telegram: *`'+str(rt)+'`\n'
          tg = tg.replace('üõÖ *Telegram: *`–£–ø—Å... –¢–∞–∫–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ TG –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.`\n', '')
          tg_html = 'Telegram: '+str(rt)+"<br>"
          tg_html = tg_html.replace('Telegram: –£–ø—Å... –¢–∞–∫–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ TG –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.<br>', 'Telegram: ')
          # –ß–µ–∫ –≤–∞—Ü–∞–ø
          nameqs = ''
          try:
            whatt = await message.answer('‚úÖ *–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Whatsapp...*', parse_mode='Markdown')
            whwh = ''
            permq = 1
            with open('tickets.txt', encoding='utf-8', errors='ignore') as file:
                              for line in file:
                                if user_id in line:
                                  permq = 1
            if permq == 1:
              rwh = requests.get('http://ovh.foxodever.com:65535/whatsapp/'+phonse).json()
              whwh_nac = rwh['exists']
              print(whwh)
              whwh = str(whwh_nac).replace('True', '\n‚úÖ* Whatsapp:* `–µ—Å—Ç—å`').replace('False', '')
              whwh_html = str(whwh_nac).replace('True', 'Whatsapp: –µ—Å—Ç—å<br>').replace('False', '')
            else:
              whwh = ''
              whwh_html = ''
            await whatt.delete()
          except:
            whwh = ''
            whwh_html = ''
          # –ö–æ–ª-–≤–æ –æ–±—å—è–≤–ª–µ–Ω–∏–π
          obbd = await message.answer('üè™* –°—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ –æ–±—å—è–≤–ª–µ–Ω–∏–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...*', parse_mode="Markdown")
          rrtr = requests.get('http://ovh.foxodever.com:65535/avito/'+phonse).json()
          try:
            clvobd = str(rrtr['count'])
            clvob = f'\nüè™ *–ö–æ–ª-–≤–æ –æ–±—å—è–≤–ª–µ–Ω–∏–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:* `{clvobd}`'
            clvob_html = f'–ö–æ–ª-–≤–æ –æ–±—å—è–≤–ª–µ–Ω–∏–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {clvobd}<br>'
          except:
            clvob = ''
            clvob_html = ''
          await obbd.delete()
          gogop = 1
          if gogop == 1:
                      phonke = '+'+phonse
                      phonee = phonse
                      phonio = phonee.replace('', ' ')
                      dd = phonio.split()[0]+'/'+phonio.split()[1]+'/'+phonio.split()[2]+'/'+phonio.split()[3]+'/'+phonio.split()[4]+'/'+phonio.split()[5]
                      
                      
                      fiof = ''
                      emcd = ''
                      print(phonke)
                      fight = 0
                      nameqs = ''
                      fiof_html = ''
                      emcd_html = ''
                      nameqs_html = ''
                      
          try: 
              URLavito = "https://opredelitel.com/pay/7" + phone
              HEADERS = {
                  "User-Agent":
                      "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0"
              }
              ra = requests.get(URLavito, headers=HEADERS)
              soup = BeautifulSoup(ra.content, 'html.parser')
              items = soup.findAll('div', class_='preview_da_line')
              comps = []
              for item in items:
                  comps.append({
                      'titlew':
                          item.find('div', class_='da_title').get_text(strip=True),
                      'infow':
                          item.find('div', class_='da_info').get_text(strip=True)
                  })
          except:
              pass
          try:
              for comp in comps:
                
                  comp['infow'] = comp['infow'].replace(' / –ê–¥—Ä–µ—Å: —Å–∫—Ä—ã—Ç –≤ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–æ–º –æ—Ç—á—ë—Ç–µ', '')
                  obyavss = obyavss+f"–ù–∞–π–¥–µ–Ω–æ –æ–±—å—è–≤–ª–µ–Ω–∏–µ: {comp['titlew']}<br>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {comp['infow']}<br><br>"
              if obyavss == '':
                obyavss = '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã'
          except:
              pass